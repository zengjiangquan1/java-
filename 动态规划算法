动态规划（Dynamic Programming）
动态规划的思想
动态规划是一种算法设计思想，适用于具有重叠子问题和最优子结构性质的问题。其基本思想是将问题分解为相对简单的子问题，通过存储子问题的解来避免重复计算，从而提高算法的效率。动态规划通常通过以下步骤来解决问题：

定义子问题：将原问题分解为若干子问题。
状态定义：用数组或其他数据结构来保存子问题的解。
状态转移方程：找出子问题之间的递推关系。
边界条件：确定初始状态。
计算顺序：通常采用自底向上的方式，即从最小的子问题开始，逐步计算到原问题。
经典例题
1. 斐波那契数列
问题描述：求第 n 个斐波那契数。

代码示例：

java
复制代码
public int fib(int n) {
    if (n <= 1) return n;
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}
2. 爬楼梯
一、启发思考：寻找子问题
假设 n=9。

我们要解决的问题是从 0 爬到 9 有多少种不同的方法。

分类讨论：

如果最后一步爬了 1 个台阶，那么我们得先爬到 8，要解决的问题缩小成：从 0 爬到 8 有多少种不同的方法。
如果最后一步爬了 2 个台阶，那么我们得先爬到 7，要解决的问题缩小成：从 0 爬到 7 有多少种不同的方法。
由于这两种情况都会把原问题变成一个和原问题相似的、规模更小的子问题，所以可以用递归解决。

注 1：从大往小思考，主要是为了方便把递归翻译成递推。从小往大思考也是可以的。

注 2：动态规划有「选或不选」和「枚举选哪个」两种基本思考方式。在做题时，可根据题目要求，选择适合题目的一种来思考。本题用到的是「枚举选哪个」

作者：灵茶山艾府
链接：https://leetcode.cn/problems/climbing-stairs/solutions/2560716/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-7zm1/
来源：力扣（LeetCode）
问题描述：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶？

代码示例：

java
复制代码
public int climbStairs(int n) {
    if (n <= 2) return n;
    int[] dp = new int[n + 1];
    dp[1] = 1;
    dp[2] = 2;
    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}
3. 最长上升子序列
问题描述：给定一个无序的整数数组，找到其中最长上升子序列的长度。

代码示例：

java
复制代码
public int lengthOfLIS(int[] nums) {
    if (nums.length == 0) return 0;
    int[] dp = new int[nums.length];
    int max = 0;
    for (int i = 0; i < nums.length; i++) {
        dp[i] = 1;
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
        max = Math.max(max, dp[i]);
    }
    return max;
}
4. 最大子数组和
问题描述：给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

代码示例：

java
复制代码
public int maxSubArray(int[] nums) {
    int[] dp = new int[nums.length];
    dp[0] = nums[0];
    int max = dp[0];
    for (int i = 1; i < nums.length; i++) {
        dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);
        max = Math.max(max, dp[i]);
    }
    return max;
}
5. 硬币兑换问题
问题描述：给定不同面额的硬币和一个总金额，写出函数来计算可以凑成总金额的硬币组合数。如果没有任何一种硬币组合能组成总金额，返回 -1。

代码示例：

java
复制代码
public int coinChange(int[] coins, int amount) {
    int max = amount + 1;
    int[] dp = new int[amount + 1];
    Arrays.fill(dp, max);
    dp[0] = 0;
    for (int i = 1; i <= amount; i++) {
        for (int coin : coins) {
            if (i - coin >= 0) {
                dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
    }
    return dp[amount] > amount ? -1 : dp[amount];
}
6. 编辑距离
问题描述：给定两个单词 word1 和 word2，计算将 word1 转换为 word2 所使用的最少操作数。你可以对一个单词进行以下三种操作：插入一个字符、删除一个字符、替换一个字符。

代码示例：

java
复制代码
public int minDistance(String word1, String word2) {
    int m = word1.length();
    int n = word2.length();
    int[][] dp = new int[m + 1][n + 1];
    for (int i = 0; i <= m; i++) {
        dp[i][0] = i;
    }
    for (int j = 0; j <= n; j++) {
        dp[0][j] = j;
    }
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.min(dp[i - 1][j - 1] + 1, Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));
            }
        }
    }
    return dp[m][n];
}
7. 背包问题
问题描述：给定一组物品，每个物品有一个重量和一个价值，在限定的总重量内，如何选择物品使得其总价值最大。

代码示例：

java
复制代码
public int knapsack(int[] weights, int[] values, int W) {
    int n = weights.length;
    int[][] dp = new int[n + 1][W + 1];
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}
数字塔问题 (Triangle Problem)
给定一个三角形数组，找到从顶部到底部的最小路径和。每一步只能移动到下一行中相邻的节点。

例如，给定以下三角形：

markdown
复制代码
    2
   3 4
  6 5 7
 4 1 8 3
最小路径和是 11（2 -> 3 -> 5 -> 1）。

动态规划解法
因为从上往下太麻烦了，而且还增加时间复杂度比较哪个路径最短，而从下往上则上面最顶端的路径即是最短的
我们可以从底部开始往上移动，在每一个位置上记录从该位置到底部的最小路径和。
import java.util.List;

public class Triangle {
    public int minimumTotal(List<List<Integer>> triangle) {
        if (triangle == null || triangle.size() == 0) {
            return 0;
        }

        // 从底部开始
        int[] dp = new int[triangle.size()];
        List<Integer> lastRow = triangle.get(triangle.size() - 1);

        for (int i = 0; i < lastRow.size(); i++) {
            dp[i] = lastRow.get(i);
        }

        // 从倒数第二层开始向上遍历
        for (int i = triangle.size() - 2; i >= 0; i--) {
            List<Integer> row = triangle.get(i);
            for (int j = 0; j < row.size(); j++) {
                dp[j] = row.get(j) + Math.min(dp[j], dp[j + 1]);
            }
        }

        return dp[0];
    }

    public static void main(String[] args) {
        Triangle triangleSolver = new Triangle();
        List<List<Integer>> triangle = List.of(
            List.of(2),
            List.of(3, 4),
            List.of(6, 5, 7),
            List.of(4, 1, 8, 3)
        );

        System.out.println("最小路径和是: " + triangleSolver.minimumTotal(triangle)); // 输出: 11
    }
}
解释
初始化：

我们先将 dp 数组初始化为三角形最后一行的元素值。
自底向上遍历：

从倒数第二行开始，我们计算每个位置的最小路径和。对于每个位置，我们选择它下面的两个相邻位置中的最小路径和，加上当前位置的值，更新 dp 数组中对应的位置。
最终结果：

当我们到达三角形的顶部时，dp[0] 将包含从顶部到底部的最小路径和。

这些例题涵盖了动态规划的不同应用场景，包括序列问题、路径问题、子集问题等。
给你一个字符串 s，找到 s 中最长的 回文子串。
public class Solution {

    public String longestPalindrome(String s) {
        int len = s.length();
        
        // 如果字符串长度小于2，直接返回该字符串，因为单个字符或空串本身就是回文
        if (len < 2) {
            return s;
        }

        int maxLen = 1; // 记录最长回文子串的长度
        int begin = 0; // 记录最长回文子串的起始位置

        // dp[i][j] 表示从索引 i 到 j 的子串是否为回文串
        boolean[][] dp = new boolean[len][len];

        // 初始化：所有长度为 1 的子串都是回文串
        for (int i = 0; i < len; i++) {
            dp[i][i] = true;
        }

        char[] charArray = s.toCharArray();

        // 递推开始
        // L 表示子串的长度，从 2 开始枚举
        for (int L = 2; L <= len; L++) {
            // i 表示左边界，j 表示右边界
            for (int i = 0; i < len; i++) {
                int j = L + i - 1; // 计算右边界的索引

                // 如果右边界越界，结束本次循环
                if (j >= len) {
                    break;
                }

                // 根据当前字符是否相等来判断是否是回文子串
                if (charArray[i] != charArray[j]) {
                    dp[i][j] = false;
                } else {
                    // 当子串长度小于等于3时，只需判断两端字符是否相等即可
                    if (j - i < 3) {
                        dp[i][j] = true;
                    } else {
                        // 当子串长度大于3时，状态转移依赖于去掉两端字符后的子串
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }

                // 如果找到更长的回文子串，更新 maxLen 和 begin
                if (dp[i][j] && j - i + 1 > maxLen) {
                    maxLen = j - i + 1;
                    begin = i;
                }
            }
        }

        // 根据最长回文子串的起始位置和长度返回结果
        return s.substring(begin, begin + maxLen);
    }
}
