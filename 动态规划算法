分治算法经典问题与思想
分治法（Divide and Conquer）是一种重要的算法设计思想，其核心思想是将一个复杂问题分解为多个子问题，递归地解决这些子问题，然后将结果合并以得到原问题的解。

分治算法的基本步骤
分解（Divide）：将问题分解为一些子问题，这些子问题是原问题的规模较小的实例。
解决（Conquer）：递归地解决这些子问题。如果子问题足够小，则直接求解。
合并（Combine）：将子问题的解合并成原问题的解。
经典问题
1. 二分搜索（Binary Search）
问题描述：在一个有序数组中查找某个目标值。

算法思想：

将数组分为两半，检查中间元素与目标值的大小关系。
如果目标值等于中间元素，查找成功。
如果目标值小于中间元素，在左半部分递归查找。
如果目标值大于中间元素，在右半部分递归查找。
代码示例：


public int binarySearch(int[] nums, int target) {
    return binarySearch(nums, target, 0, nums.length - 1);
}

private int binarySearch(int[] nums, int target, int left, int right) {
    if (left > right) {
        return -1;
    }
    int mid = left + (right - left) / 2;
    if (nums[mid] == target) {
        return mid;
    } else if (nums[mid] > target) {
        return binarySearch(nums, target, left, mid - 1);
    } else {
        return binarySearch(nums, target, mid + 1, right);
    }
}
2. 归并排序（Merge Sort）
问题描述：将一个无序数组排序。

算法思想：

将数组分为两半，递归地对每一半进行排序。
合并两个已排序的子数组，得到完整的排序结果。
代码示例：

public void mergeSort(int[] nums) {
    if (nums == null || nums.length < 2) {
        return;
    }
    mergeSort(nums, 0, nums.length - 1);
}

private void mergeSort(int[] nums, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = left + (right - left) / 2;
    mergeSort(nums, left, mid);
    mergeSort(nums, mid + 1, right);
    merge(nums, left, mid, right);
}

private void merge(int[] nums, int left, int mid, int right) {
    int[] temp = new int[right - left + 1];
    int i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) {
            temp[k++] = nums[i++];
        } else {
            temp[k++] = nums[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = nums[i++];
    }
    while (j <= right) {
        temp[k++] = nums[j++];
    }
    for (int p = 0; p < temp.length; p++) {
        nums[left + p] = temp[p];
    }
}
3. 快速排序（Quick Sort）
问题描述：将一个无序数组排序。

算法思想：

选择一个基准元素（pivot）。
将数组分为两部分，一部分所有元素都比基准元素小，另一部分所有元素都比基准元素大。
递归地对这两部分进行快速排序。
代码示例：

java
复制代码
public void quickSort(int[] nums) {
    quickSort(nums, 0, nums.length - 1);
}

private void quickSort(int[] nums, int left, int right) {
    if (left >= right) {
        return;
    }
    int pivotIndex = partition(nums, left, right);
    quickSort(nums, left, pivotIndex - 1);
    quickSort(nums, pivotIndex + 1, right);
}

private int partition(int[] nums, int left, int right) {
    int pivot = nums[right];
    int i = left;
    for (int j = left; j < right; j++) {
        if (nums[j] < pivot) {
            swap(nums, i, j);
            i++;
        }
    }
    swap(nums, i, right);
    return i;
}

private void swap(int[] nums, int i, int j) {
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}
4. 最大子数组和（Maximum Subarray Sum）
问题描述：找到一个数组中和最大的连续子数组。

算法思想：

将数组分为两部分，分别找到左半部分和右半部分的最大子数组和。
找到跨越两部分的最大子数组和。
综合以上三种情况，得到最终结果。
代码示例：

java
复制代码
public int maxSubArray(int[] nums) {
    return maxSubArray(nums, 0, nums.length - 1);
}

private int maxSubArray(int[] nums, int left, int right) {
    if (left == right) {
        return nums[left];
    }
    int mid = left + (right - left) / 2;
    int leftSum = maxSubArray(nums, left, mid);
    int rightSum = maxSubArray(nums, mid + 1, right);
    int crossSum = crossSum(nums, left, right, mid);
    return Math.max(Math.max(leftSum, rightSum), crossSum);
}

private int crossSum(int[] nums, int left, int right, int mid) {
    if (left == right) {
        return nums[left];
    }
    int leftSubSum = Integer.MIN_VALUE;
    int currSum = 0;
    for (int i = mid; i >= left; i--) {
        currSum += nums[i];
        leftSubSum = Math.max(leftSubSum, currSum);
    }
    int rightSubSum = Integer.MIN_VALUE;
    currSum = 0;
    for (int i = mid + 1; i <= right; i++) {
        currSum += nums[i];
        rightSubSum = Math.max(rightSubSum, currSum);
    }
    return leftSubSum + rightSubSum;
}
5. 归并两个有序数组（Merge Two Sorted Arrays）
问题描述：将两个有序数组合并为一个新的有序数组。

算法思想：

将两个有序数组分别分为两部分。
递归地合并这两部分，得到新的有序数组。
代码示例：

java
复制代码
public int[] mergeTwoSortedArrays(int[] nums1, int[] nums2) {
    int[] result = new int[nums1.length + nums2.length];
    int i = 0, j = 0, k = 0;
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] <= nums2[j]) {
            result[k++] = nums1[i++];
        } else {
            result[k++] = nums2[j++];
        }
    }
    while (i < nums1.length) {
        result[k++] = nums1[i++];
    }
    while (j < nums2.length) {
        result[k++] = nums2[j++];
    }
    return result;
}
6. 棋盘覆盖问题（Chessboard Coverage Problem）
问题描述：给定一个 $2^k \times 2^k$ 的棋盘，其中一个格子是特殊格子。使用 L 形多米诺骨牌覆盖整个棋盘，除了特殊格子。

算法思想：

将棋盘分为四个 $2^{k-1} \times 2^{k-1}$ 的子棋盘。
在靠近特殊格子的三个子棋盘的中心位置放置一个 L 形多米诺骨牌。
递归地解决每个子棋盘的问题。
代码示例：

java
复制代码
public void coverChessboard(int[][] board, int tr, int tc, int dr, int dc, int size) {
    if (size == 1) {
        return;
    }
    int t = 0; // L 形骨牌的编号
    int s = size / 2;
    // 覆盖左上角子棋盘
    if (dr < tr + s && dc < tc + s) {
        coverChessboard(board, tr, tc, dr, dc, s);
    } else {
        board[tr + s - 1][tc + s - 1] = t;
        coverChessboard(board, tr, tc, tr + s - 1, tc + s - 1, s);
    }
    // 覆盖右上角子棋盘
    if (dr < tr + s && dc >= tc + s) {
        coverChessboard(board, tr, tc + s, dr, dc, s);
    } else {
        board[tr + s - 1][tc + s] = t;
        coverChessboard(board, tr, tc + s, tr + s - 1, tc + s, s);
    }
    // 覆盖左下角子棋盘
    if (dr >= tr + s && dc < tc + s) {
        coverChessboard(board, tr + s, tc, dr, dc, s);
    } else {
        board[tr + s][tc + s - 1] = t;
        coverChessboard(board, tr + s, tc, tr + s, tc + s - 1, s);
    }
    // 覆盖右下角子棋盘
    if (dr >= tr + s && dc >= tc + s) {
        coverChessboard(board, tr + s, tc + s, dr, dc, s);
    } else {
        board[tr + s][tc + s] = t;
        coverChessboard(board, tr + s, tc + s, tr + s, tc + s, s);
    }
}
7. 最近点对问题（Closest Pair of Points Problem）
问题描述：给定平面上 n 个点，找出距离最近的两个点。

算法思想：

将点集按 x 坐标排序。
分为左右两部分，递归地找出左右两部分的最近点对。
找出横跨左右部分的最近点对。
综合以上三种情况，得到最终结果。
代码示例：

java
复制代码
class Point {
    int x, y;
    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public double closestPair(Point[] points) {
    Arrays.sort(points, Comparator.comparingInt(p -> p.x));
    return closestPair(points, 0, points.length - 1);
}

private double closestPair(Point[] points, int left, int right) {
    if (right - left <= 3) {
        return bruteForce(points, left, right);
    }
    int mid = left + (right - left) / 2;
    double leftDist = closestPair(points, left, mid);
    double rightDist = closestPair(points, mid + 1, right);
    double minDist = Math.min(leftDist, rightDist);
    List<Point> strip = new ArrayList<>();
    for (int i = left; i <= right; i++) {
        if (Math.abs(points[i].x - points[mid].x) < minDist) {
            strip.add(points[i]);
        }
    }
    return Math.min(minDist, stripClosest(strip, minDist));
}

private double bruteForce(Point[] points, int left, int right) {
    double minDist = Double.MAX_VALUE;
    for (int i = left; i <= right; i++) {
        for (int j = i + 1; j <= right; j++) {
            double dist = distance(points[i], points[j]);
            if (dist < minDist) {
                minDist = dist;
            }
        }
    }
    return minDist;
}

private double stripClosest(List<Point> strip, double d) {
    double minDist = d;
    strip.sort(Comparator.comparingInt(p -> p.y));
    for (int i = 0; i < strip.size(); i++) {
        for (int j = i + 1; j < strip.size() && (strip.get(j).y - strip.get(i).y) < minDist; j++) {
            double dist = distance(strip.get(i), strip.get(j));
            if (dist < minDist) {
                minDist = dist;
            }
        }
    }
    return minDist;
}

private double distance(Point p1, Point p2) {
    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}
8. 循环比赛日程安排（Tournament Schedule）
问题描述：安排 n 支队伍进行循环比赛，每支队伍与其他 n-1 支队伍各比赛一次。

算法思想：

将队伍分为两组，分别安排组内比赛。
安排组间比赛。
递归地安排比赛。
代码示例：

java
复制代码
public String[][] generateTournament(int n) {
    String[][] schedule = new String[n][n - 1];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            schedule[i][j] = "Team " + (i + 1) + " vs Team " + ((i + j + 1) % n + 1);
        }
    }
    return schedule;
}
这些示例涵盖了分治算法的一些经典应用。通过递归分解问题、解决子问题并合并结果，分治法能够高效解决许多复杂问题。

你可以将这些代码和解释上传到 GitHub，并根据需要调整格式和注释。

还有动态规划算法所有思路以及经典例题我会发在github上
ChatGPT
记忆已更新
动态规划（Dynamic Programming）
动态规划的思想
动态规划是一种算法设计思想，适用于具有重叠子问题和最优子结构性质的问题。其基本思想是将问题分解为相对简单的子问题，通过存储子问题的解来避免重复计算，从而提高算法的效率。动态规划通常通过以下步骤来解决问题：

定义子问题：将原问题分解为若干子问题。
状态定义：用数组或其他数据结构来保存子问题的解。
状态转移方程：找出子问题之间的递推关系。
边界条件：确定初始状态。
计算顺序：通常采用自底向上的方式，即从最小的子问题开始，逐步计算到原问题。
经典例题
1. 斐波那契数列
问题描述：求第 n 个斐波那契数。

代码示例：

java
复制代码
public int fib(int n) {
    if (n <= 1) return n;
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}
2. 爬楼梯
问题描述：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶？

代码示例：

java
复制代码
public int climbStairs(int n) {
    if (n <= 2) return n;
    int[] dp = new int[n + 1];
    dp[1] = 1;
    dp[2] = 2;
    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}
3. 最长上升子序列
问题描述：给定一个无序的整数数组，找到其中最长上升子序列的长度。

代码示例：

java
复制代码
public int lengthOfLIS(int[] nums) {
    if (nums.length == 0) return 0;
    int[] dp = new int[nums.length];
    int max = 0;
    for (int i = 0; i < nums.length; i++) {
        dp[i] = 1;
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
        max = Math.max(max, dp[i]);
    }
    return max;
}
4. 最大子数组和
问题描述：给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

代码示例：

java
复制代码
public int maxSubArray(int[] nums) {
    int[] dp = new int[nums.length];
    dp[0] = nums[0];
    int max = dp[0];
    for (int i = 1; i < nums.length; i++) {
        dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);
        max = Math.max(max, dp[i]);
    }
    return max;
}
5. 硬币兑换问题
问题描述：给定不同面额的硬币和一个总金额，写出函数来计算可以凑成总金额的硬币组合数。如果没有任何一种硬币组合能组成总金额，返回 -1。

代码示例：

java
复制代码
public int coinChange(int[] coins, int amount) {
    int max = amount + 1;
    int[] dp = new int[amount + 1];
    Arrays.fill(dp, max);
    dp[0] = 0;
    for (int i = 1; i <= amount; i++) {
        for (int coin : coins) {
            if (i - coin >= 0) {
                dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
    }
    return dp[amount] > amount ? -1 : dp[amount];
}
6. 编辑距离
问题描述：给定两个单词 word1 和 word2，计算将 word1 转换为 word2 所使用的最少操作数。你可以对一个单词进行以下三种操作：插入一个字符、删除一个字符、替换一个字符。

代码示例：

java
复制代码
public int minDistance(String word1, String word2) {
    int m = word1.length();
    int n = word2.length();
    int[][] dp = new int[m + 1][n + 1];
    for (int i = 0; i <= m; i++) {
        dp[i][0] = i;
    }
    for (int j = 0; j <= n; j++) {
        dp[0][j] = j;
    }
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.min(dp[i - 1][j - 1] + 1, Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));
            }
        }
    }
    return dp[m][n];
}
7. 背包问题
问题描述：给定一组物品，每个物品有一个重量和一个价值，在限定的总重量内，如何选择物品使得其总价值最大。

代码示例：

java
复制代码
public int knapsack(int[] weights, int[] values, int W) {
    int n = weights.length;
    int[][] dp = new int[n + 1][W + 1];
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}
数字塔问题 (Triangle Problem)
给定一个三角形数组，找到从顶部到底部的最小路径和。每一步只能移动到下一行中相邻的节点。

例如，给定以下三角形：

markdown
复制代码
    2
   3 4
  6 5 7
 4 1 8 3
最小路径和是 11（2 -> 3 -> 5 -> 1）。

动态规划解法
我们可以从底部开始往上移动，在每一个位置上记录从该位置到底部的最小路径和。
import java.util.List;

public class Triangle {
    public int minimumTotal(List<List<Integer>> triangle) {
        if (triangle == null || triangle.size() == 0) {
            return 0;
        }

        // 从底部开始
        int[] dp = new int[triangle.size()];
        List<Integer> lastRow = triangle.get(triangle.size() - 1);

        for (int i = 0; i < lastRow.size(); i++) {
            dp[i] = lastRow.get(i);
        }

        // 从倒数第二层开始向上遍历
        for (int i = triangle.size() - 2; i >= 0; i--) {
            List<Integer> row = triangle.get(i);
            for (int j = 0; j < row.size(); j++) {
                dp[j] = row.get(j) + Math.min(dp[j], dp[j + 1]);
            }
        }

        return dp[0];
    }

    public static void main(String[] args) {
        Triangle triangleSolver = new Triangle();
        List<List<Integer>> triangle = List.of(
            List.of(2),
            List.of(3, 4),
            List.of(6, 5, 7),
            List.of(4, 1, 8, 3)
        );

        System.out.println("最小路径和是: " + triangleSolver.minimumTotal(triangle)); // 输出: 11
    }
}
解释
初始化：

我们先将 dp 数组初始化为三角形最后一行的元素值。
自底向上遍历：

从倒数第二行开始，我们计算每个位置的最小路径和。对于每个位置，我们选择它下面的两个相邻位置中的最小路径和，加上当前位置的值，更新 dp 数组中对应的位置。
最终结果：

当我们到达三角形的顶部时，dp[0] 将包含从顶部到底部的最小路径和。

这些例题涵盖了动态规划的不同应用场景，包括序列问题、路径问题、子集问题等。
