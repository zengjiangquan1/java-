1. 简介

 二叉树专题

本专题涵盖了二叉树的基本概念、种类、常见操作、遍历方法及相关的算法问题。希望通过这些内容，读者能够深入理解二叉树的相关知识，并能够熟练地解决相关的算法问题。
2. 二叉树的种类
二叉树的种类

1. 满二叉树 (Full Binary Tree)
   每个结点要么是叶子结点，要么有两个子结点。
   
2. 完全二叉树 (Complete Binary Tree)
   除了最后一层，其他层的结点都是满的，且最后一层的结点尽可能地靠左。

3. 完美二叉树 (Perfect Binary Tree)
   所有内结点都有两个子结点，所有叶子结点都在同一层。

4. 平衡二叉树 (Balanced Binary Tree)
   左右子树的高度差不超过1。

5. 搜索二叉树 (Binary Search Tree)
   左子树的结点值都小于根结点值，右子树的结点值都大于根结点值。

6. 红黑树 (Red-Black Tree)
   一种自平衡二叉查找树，具有额外的红黑属性。

7. AVL树 (AVL Tree)
   一种自平衡二叉查找树，左右子树高度差不超过1。
3. 二叉树的基本操作
二叉树的基本操作

 创建二叉树

```java
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int x) {
        val = x;
    }
}
插入节点
java
复制代码
public TreeNode insert(TreeNode root, int val) {
    if (root == null) {
        return new TreeNode(val);
    }
    if (val < root.val) {
        root.left = insert(root.left, val);
    } else if (val > root.val) {
        root.right = insert(root.right, val);
    }
    return root;
}
删除节点
java
复制代码
public TreeNode delete(TreeNode root, int val) {
    if (root == null) {
        return null;
    }
    if (val < root.val) {
        root.left = delete(root.left, val);
    } else if (val > root.val) {
        root.right = delete(root.right, val);
    } else {
        if (root.left == null) {
            return root.right;
        } else if (root.right == null) {
            return root.left;
        }
        TreeNode minNode = findMin(root.right);
        root.val = minNode.val;
        root.right = delete(root.right, minNode.val);
    }
    return root;
}

private TreeNode findMin(TreeNode root) {
    while (root.left != null) {
        root = root.left;
    }
    return root;
}
4. 二叉树的遍历
markdown
复制代码
## 二叉树的遍历

### 前序遍历 (Pre-order Traversal)

```java
public void preOrder(TreeNode root) {
    if (root == null) {
        return;
    }
    System.out.print(root.val + " ");
    preOrder(root.left);
    preOrder(root.right);
}
中序遍历 (In-order Traversal)
java
复制代码
public void inOrder(TreeNode root) {
    if (root == null) {
        return;
    }
    inOrder(root.left);
    System.out.print(root.val + " ");
    inOrder(root.right);
}
后序遍历 (Post-order Traversal)
java
复制代码
public void postOrder(TreeNode root) {
    if (root == null) {
        return;
    }
    postOrder(root.left);
    postOrder(root.right);
    System.out.print(root.val + " ");
}
层序遍历 (Level-order Traversal)
java
复制代码
public void levelOrder(TreeNode root) {
    if (root == null) {
        return;
    }
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        TreeNode node = queue.poll();
        System.out.print(node.val + " ");
        if (node.left != null) {
            queue.add(node.left);
        }
        if (node.right != null) {
            queue.add(node.right);
        }
    }
}
5. 常见问题和算法
markdown
复制代码
## 常见问题和算法

### 1. 二叉树的最大深度

#### 问题描述

给定一个二叉树，找出其最大深度。

#### 示例

输入: [3,9,20,null,null,15,7]
输出: 3

csharp
复制代码

#### 解决方案

```java
public int maxDepth(TreeNode root) {
    if (root == null) {
        return 0;
    }
    int leftDepth = maxDepth(root.left);
    int rightDepth = maxDepth(root.right);
    return Math.max(leftDepth, rightDepth) + 1;
}
2. 二叉树的最小深度
问题描述
给定一个二叉树，找出其最小深度。

示例
csharp
复制代码
输入: [3,9,20,null,null,15,7]
输出: 2
解决方案
java
复制代码
public int minDepth(TreeNode root) {
    if (root == null) {
        return 0;
    }
    if (root.left == null) {
        return minDepth(root.right) + 1;
    }
    if (root.right == null) {
        return minDepth(root.left) + 1;
    }
    return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
}
3. 判断二叉树是否对称
问题描述
给定一个二叉树，检查它是否是镜像对称的。

示例
csharp
复制代码
输入: [1,2,2,3,4,4,3]
输出: true

输入: [1,2,2,null,3,null,3]
输出: false
解决方案
java
复制代码
public boolean isSymmetric(TreeNode root) {
    if (root == null) {
        return true;
    }
    return isMirror(root.left, root.right);
}

private boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) {
        return true;
    }
    if (t1 == null || t2 == null) {
        return false;
    }
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}
4. 计算二叉树的节点数
问题描述
给定一个二叉树，计算其所有节点的数目。

示例
makefile
复制代码
输入: [1,2,3,4,5,6]
输出: 6
解决方案
java
复制代码
public int countNodes(TreeNode root) {
    if (root == null) {
        return 0;
    }
    return 1 + countNodes(root.left) + countNodes(root.right);
}
5. 翻转二叉树
问题描述
翻转一棵二叉树。

示例
less
复制代码
输入: [4,2,7,1,3,6,9]
输出: [4,7,2,9,6,3,1]
解决方案
java
复制代码
public TreeNode invertTree(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode left = invertTree(root.left);
    TreeNode right = invertTree(root.right);
    root.left = right;
    root.right = left;
    return root;
}
6. 找到二叉树中最长的路径
问题描述
给定一个二叉树，找到它的最长路径。这条路径可能经过根节点也可能不经过。

示例
less
复制代码
输入: [1,2,3,4,5]
输出: 3
解释: 最长路径为 [4,2,1,3] 或者 [5,2,1,3]
解决方案
java
复制代码
public int diameterOfBinaryTree(TreeNode root) {
    int[] diameter = new int[1];
    maxDepth(root, diameter);
    return diameter[0];
}

private int maxDepth(TreeNode node, int[] diameter) {
    if (node == null) {
        return 0;
    }
    int left = maxDepth(node.left, diameter);
    int right = maxDepth(node.right, diameter);
    diameter[0] = Math.max(diameter[0], left + right);
    return Math.max(left, right) + 1;
}
7. 找到二叉树的最低共同祖先
问题描述
给定一个二叉树，找到它的最低共同祖先 (LCA) 的两个指定节点。

示例
less
复制代码
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最低共同祖先是节点 3。
解决方案
java
复制代码
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if (root == null || root == p || root == q) {
        return root;
    }
    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    if (left != null && right != null) {
        return root;
    }
    return left != null ? left : right;
}
8. 从有序数组构造二叉搜索树
问题描述
给定一个有序数组，构建一棵高度平衡的二叉搜索树。

示例
less
复制代码
输入: [-10,-3,0,5,9]
输出: [0,-3,9,-10,null,5]
解决方案
java
复制代码
public TreeNode sortedArrayToBST(int[] nums) {
    return helper(nums, 0, nums.length - 1);
}

private TreeNode helper(int[] nums, int left, int right) {
    if (left > right) {
        return null;
    }
    int mid = left + (right - left) / 2;
    TreeNode node = new TreeNode(nums[mid]);
    node.left = helper(nums, left, mid - 1);
    node.right = helper(nums, mid + 1, right);
    return node;
}
9. 二叉树的层序遍历
问题描述
给定一个二叉树，返回其节点值的层序遍历。 （即从左到右，逐层遍历）

示例
csharp
复制代码
输入: [3,9,20,null,null,15,7]
输出: [
  [3],
  [9,20],
  [15,7]
]
解决方案
java
复制代码
public List<List<Integer>> levelOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<>();
    if (root == null) {
        return result;
    }
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        int levelSize = queue.size();
        List<Integer> currentLevel = new ArrayList<>();
        for (int i = 0; i < levelSize; i++) {
            TreeNode currentNode = queue.poll();
            currentLevel.add(currentNode.val);
            if (currentNode.left != null) {
                queue.add(currentNode.left);
            }
            if (currentNode.right != null) {
                queue.add(currentNode.right);
            }
        }
        result.add(currentLevel);
    }
    return result;
}
10. 二叉树的右视图
问题描述
给定一个二叉树，想象自己站在它的右侧，返回从右侧所能看到的节点值。

示例
csharp
复制代码
输入: [1,2,3,null,5,null,4]
输出: [1,3,4]
解决方案
java
复制代码
public List<Integer> rightSideView(TreeNode root) {
    List<Integer> result = new ArrayList<>();
    if (root == null) {
        return result;
    }
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        int levelSize = queue.size();
        for (int i = 0; i < levelSize; i++) {
            TreeNode currentNode = queue.poll();
            if (i == levelSize - 1) {
                result.add(currentNode.val);
            }
            if (currentNode.left != null) {
                queue.add(currentNode.left);
            }
            if (currentNode.right != null) {
                queue.add(currentNode.right);
            }
        }
    }
    return result;
}
这些题目和解决方案涵盖了二叉树常见的算法问题，包括深度计算、对称判断、节点计数、树的翻转、最长路径查找、最低共同祖先查找、构造平衡二叉搜索树、层序遍历及右视图等。这些代码和解释可以帮助你深入理解二叉树的算法问题。
